<<< 
# This is a special tag that runs before every other tag in this template.
# What makes it special is the triple angle brackets surrounding it. 
# This tag also gets run before the Preprocessor kicks in. The preprocessor
# relies on this tag to find the number of contracts needed for this report.
#
# Find the number of Contracts
looking = true; MAX_ITERATION_LIMIT = 1000; i = 1;
NUMBER_OF_CONTRACTS = 0; C_RowStart = 0;
while (looking and i < MAX_ITERATION_LIMIT) {
    
    let siteCell = "R" + (row.CSiteCol + i) + "C" + col.CSiteCol; 
    siteCell = Contracts.siteCell;

    # It is a new contract if it has text and no formula
    let noform = (f.siteCell == empty or f.siteCell == "");
    let notext = (str.siteCell == empty or str.siteCell == "");
    if (noform and not notext) {
        NUMBER_OF_CONTRACTS = NUMBER_OF_CONTRACTS + 1;
    }

    # Mark the start of this contract
    if (NUMBER_OF_CONTRACTS > 0 and C_RowStart == 0) { 
        C_RowStart = i;
    }
    
    # Break once we've found the contract row or reached the end of our table
    else if (notext and C_RowStart != 0) { 
        looking = false; 
    }
    
    i = i + 1; 
}
"";

>>>

<< 
    # Initialise Totals
    T_ACOverpayPre = 0;       T_ACOverpayPost = 0;   T_ACSChargePre = 0;
    T_ACSChargePost = 0;      T_ACQuantumPre = 0;    T_ACQuantumPost = 0;
    T_ACStatPre = 0;          T_ACStatPost = 0;      T_ACQuantumStatPre = 0;
    T_ACQuantumStatPost = 0;  T_RCCommission = 0;    T_RCSCharge = 0;
    T_RCQuantum = 0;          T_RCStat = 0;          T_RCQuantumStat = 0;
    "";

>><< 

    # First Page Setup
    acr1c1 = Home.C94;        acr2c1 = Home.C95;      acr3c1 = Home.C96;
    acr1c2 = Home.C100;       acr2c2 = Home.C101;     acr3c2 = Home.C102;
    acr1c1 = num.acr1c1;      acr1c2 = num.acr1c2;    acr2c1 = num.acr2c1;
    acr2c2 = num.acr2c2;      acr3c1 = num.acr3c1;    acr3c2 = num.acr3c2;
    rc1 = Home.F91;           rc2 = Home.F92;         rc3 = Home.F93;
    rc1 = num.rc1;            rc2 = num.rc2;          rc3 = num.rc3;
    "";

>><< 

    # Contract Setup
    MAX_ITERATION_LIMIT = 1000;
    CX = Contracts;            C_SiteName = "";        C_SiteAddress = "";
    C_SiteAccount = "";        C_SiteMPAN = "";        C_SiteMeter = "";
    C_ContractType = "";       C_UtilityType = "";     C_ContractLength = "";
    C_AverageMonthly = "";     C_SignDate = "";        C_StartDate = "";
    C_EndDate = "";            C_drates = "";          C_nrates = "";
    C_erates = "";             C_wrates = "";          C_xrates = "";
    C_yrates = "";             C_peakRate = "";        C_baseRate = "";
    C_deac = "";               C_neac = "";            C_eeac = "";
    C_weac = "";               C_xeac = "";            C_yeac = "";
    C_ACOverpayPre = 0;        C_ACOverpayPost = 0;    C_ACSChargePre = 0;
    C_ACSChargePost = 0;       C_ACQuantumPre = 0;     C_ACQuantumPost = 0;
    C_ACStatPre = 0;           C_ACStatPost = 0;       C_ACQuantumStatPre = 0;
    C_ACQuantumStatPost = 0;   C_RCCommission = 0;     C_RCSCharge = 0;
    C_RCQuantum = 0;           C_RCStat = 0;           C_RCQuantumStat = 0;
    C_Count = 0;               C_RowStart = 0;         C_RowEnd = 0;
    C_ActUse = "";             looking = true;         i = 1;   "";

>><< 

# Look for the start and end rows of the current contract
while (looking and i < MAX_ITERATION_LIMIT) {
    
    let siteCell = "R" + (row.CSiteCol + i) + "C" + col.CSiteCol; 
    siteCell = Contracts.siteCell;

    # It is a new contract if it has text and no formula
    let noform = (f.siteCell == empty or f.siteCell == "");
    let notext = (str.siteCell == empty or str.siteCell == "");
    if (noform and not notext) {
        C_Count = C_Count + 1;
    }

    # Mark the start of this contract
    if (C_Count == CN_Ord and C_RowStart == 0) { 
        C_RowStart = i; 
    }
    
    # Break once we've found the contract row or reached the end of our table
    else if (C_Count > CN_Ord or (notext and C_RowStart != 0)) { 
        C_RowEnd = i; 
        looking = false; 
    }
    
    i = i + 1; 
}
"";

>><<

# Gather information from every row of the contract
i = C_RowStart
while (i < C_RowEnd) {
    prefix = "R" + (row.CSiteCol + i) + "C";
    
    # Labelled Headers
    SiteCell = prefix + col.CSiteCol;       TypeCell = prefix + col.CTypeCol;
    SignCell = prefix + col.CSignCol;       StartCell = prefix + col.CStartCol;
    CEndCell = prefix + col.CCEndCol;       TermCell = prefix + col.CTermCol;
    EAC1Cell = prefix + col.CEAC1Col;       Bill1Cell = prefix + col.CBill1Col;
    EAC2Cell = prefix + col.CEAC2Col;       Bill2Cell = prefix + col.CBill2Col;
    PeakCell = prefix + col.CPeakCol;       BaseCell = prefix + col.CBaseCol;
    LengthCell = prefix + col.CLengthCol;   EndCell = prefix + col.CEndCol;
    Usage1Cell = prefix + col.CUsage1Col;   Stat1Cell = prefix + col.CStat1Col;
    Claim1Cell = prefix + col.CClaim1Col;   EstUseCell = prefix + col.CEstUseCol;
    ActUseCell = prefix + col.CActUseCol;   Rate2Cell = prefix + col.CRate2Col;
    Usage2Cell = prefix + col.CUsage2Col;   Stat2Cell = prefix + col.CStat2Col;
    Claim2Cell = prefix + col.CClaim2Col;

    # Unlabelled Headers
    UtilityCell = CX.C4;  UtilityCell = prefix + col.UtilityCell;
    EAC3Cell = CX.N5;     EAC3Cell = prefix + col.EAC3Cell;
    Bill3Cell = CX.O5;    Bill3Cell = prefix + col.Bill3Cell;
    EAC4Cell = CX.P5;     EAC4Cell = prefix + col.EAC4Cell;
    Bill4Cell = CX.Q5;    Bill4Cell = prefix + col.Bill4Cell;
    EAC5Cell = CX.R5;     EAC5Cell = prefix + col.EAC5Cell;
    Bill5Cell = CX.S5;    Bill5Cell = prefix + col.Bill5Cell;
    EAC6Cell = CX.T5;     EAC6Cell = prefix + col.EAC6Cell;
    Bill6Cell = CX.U5;    Bill6Cell = prefix + col.Bill6Cell;

    # Extra Headers
    OverPreCell = CX.AJ4;   OverPreCell = prefix + col.OverPreCell;
    SCPreCell = CX.AK4;     SCPreCell = prefix + col.SCPreCell;
    StatPreCell = CX.AL4;   StatPreCell = prefix + col.StatPreCell;
    OverPostCell = CX.AM4;  OverPostCell = prefix + col.OverPostCell;
    SCPostCell = CX.AN4;    SCPostCell = prefix + col.SCPostCell;
    StatPostCell = CX.AO4;  StatPostCell = prefix + col.StatPostCell;

    # First Row
    if (i == C_RowStart) {
        C_SiteName = CX.SiteCell
        C_ContractType = CX.TypeCell;
        C_UtilityType = CX.UtilityCell;
        C_ContractLength = CX.LengthCell;
        C_SignDate = CX.SignCell;           C_SignDate = date.C_SignDate;
        C_StartDate = CX.StartCell;         C_StartDate = date.C_StartDate;
        C_EndDate = CX.CEndCell;            C_EndDate = date.C_EndDate;
        C_peakRate = CX.PeakCell;           C_peakRate = num.C_peakRate;
        C_baseRate = CX.BaseCell;           C_baseRate = num.C_baseRate;
        C_ACOverpayPre = CX.OverPreCell;    C_ACOverpayPre = num.C_ACOverpayPre;
        C_ACOverpayPost = CX.OverPostCell;  C_ACOverpayPost = num.C_ACOverpayPost;
        C_ACSChargePre = CX.SCPreCell;      C_ACSChargePre = num.C_ACSChargePre;
        C_ACSChargePost = CX.SCPostCell;    C_ACSChargePost = num.C_ACSChargePost;
        C_ACStatPre = CX.StatPreCell;       C_ACStatPre = num.C_ACStatPre;
        C_ACStatPost = CX.StatPostCell;     C_ACStatPost = num.C_ACStatPost;
        C_RCQuantum = CX.Usage2Cell;        C_RCQuantum = num.C_RCQuantum;
        C_RCStat = CX.Stat2Cell;            C_RCStat = num.C_RCStat;
        C_RCQuantumStat = CX.Claim2Cell;    C_RCQuantumStat = num.C_RCQuantumStat;
        C_ActUse = CX.ActUseCell;           C_ActUse = num.C_ActUse;
        
        # If we only have one contract line
        if (C_RowEnd - C_RowStart == 1) {
            C_drates = CX.Bill1Cell;  C_drates = "%.2fp" % num.C_drates;
            
            C_nrates = CX.Bill2Cell;
            C_erates = CX.Bill3Cell;
            C_wrates = CX.Bill4Cell;
            C_xrates = CX.Bill5Cell;
            C_yrates = CX.Bill6Cell;

            if (num.C_nrates != 0 and num.C_nrates != empty) { 
                C_nrates = "%.2fp" % num.C_nrates; } else { C_nrates = ""; }
            if (num.C_erates != 0 and num.C_erates != empty) { 
                C_erates = "%.2fp" % num.C_erates; } else { C_erates = ""; }
            if (num.C_wrates != 0 and num.C_wrates != empty) { 
                C_wrates = "%.2fp" % num.C_wrates; } else { C_wrates = ""; }
            if (num.C_xrates != 0 and num.C_xrates != empty) { 
                C_xrates = "%.2fp" % num.C_xrates; } else { C_xrates = ""; }
            if (num.C_yrates != 0 and num.C_yrates != empty) { 
                C_yrates = "%.2fp" % num.C_yrates; } else { C_yrates = ""; }
        }
        else {
            fromMsg = " (from " + C_StartDate + ")";
            C_drates = CX.Bill1Cell;  C_drates = ("\n%.2fp" % num.C_drates) + fromMsg;
            
            C_nrates = CX.Bill2Cell;
            C_erates = CX.Bill3Cell;
            C_wrates = CX.Bill4Cell;
            C_xrates = CX.Bill5Cell;
            C_yrates = CX.Bill6Cell;
            
            # Sussy
            if (num.C_nrates != 0 and num.C_nrates != empty) { 
                C_nrates = ("\n%.2fp" % num.C_nrates) + fromMsg; } 
                else { C_nrates = ""; }
            if (num.C_erates != 0 and num.C_erates != empty) { 
                C_erates = ("\n%.2fp" % num.C_erates) + fromMsg; } 
                else { C_erates = ""; }
            if (num.C_wrates != 0 and num.C_wrates != empty) { 
                C_wrates = ("\n%.2fp" % num.C_wrates) + fromMsg; } 
                else { C_wrates = ""; }
            if (num.C_xrates != 0 and num.C_xrates != empty) { 
                C_xrates = ("\n%.2fp" % num.C_xrates) + fromMsg; } 
                else { C_xrates = ""; }
            if (num.C_yrates != 0 and num.C_yrates != empty) { 
                C_yrates = ("\n%.2fp" % num.C_yrates) + fromMsg; } 
                else { C_yrates = ""; }
            
            # Alternate version
            # if (str.C_nrates != empty) { C_nrates = ("%.2fp" % num.C_nrates) + fromMsg; }
        }
        
        # C_deac = CX.EAC1Cell;               C_deac = num.C_deac;
        # C_neac = CX.EAC2Cell;               C_neac = num.C_neac;
        # C_eeac = CX.EAC3Cell;               C_eeac = num.C_eeac;
        # C_weac = CX.EAC4Cell;               C_weac = num.C_weac;
        # C_xeac = CX.EAC5Cell;               C_xeac = num.C_xeac;
        # C_yeac = CX.EAC6Cell;               C_yeac = num.C_yeac;

        C_deac = CX.EAC1Cell;  C_deac = num.C_deac;

        C_neac = CX.EAC2Cell;
        C_eeac = CX.EAC3Cell;
        C_weac = CX.EAC4Cell;
        C_xeac = CX.EAC5Cell;
        C_yeac = CX.EAC6Cell;
        
        if (num.C_neac != 0 and num.C_neac != empty) { C_neac = num.C_neac; } else { C_neac = ""; }
        if (num.C_eeac != 0 and num.C_eeac != empty) { C_eeac = num.C_eeac; } else { C_eeac = ""; }
        if (num.C_weac != 0 and num.C_weac != empty) { C_weac = num.C_weac; } else { C_weac = ""; }
        if (num.C_xeac != 0 and num.C_xeac != empty) { C_xeac = num.C_xeac; } else { C_xeac = ""; }
        if (num.C_yeac != 0 and num.C_yeac != empty) { C_yeac = num.C_yeac; } else { C_yeac = ""; }

        # Get Site Details
        j = 1;
        looking2 = true;
        while (looking2) {
            SPrefix = "R" + (row.SNameCol + j) + "C";
            SiteNameCell = SPrefix + col.SNameCol; SiteNameCell = Home.SiteNameCell
            if (str.SiteNameCell == str.C_SiteName) {
                SSAddressCell = SPrefix + col.SAddCol; C_SAddress = Home.SSAddressCell;
                SAccountCell = SPrefix + col.SAccCol;  C_SAccount = Home.SAccountCell;
                SMPANCell = SPrefix + col.SMPANCol;    C_SMPAN = Home.SMPANCell;
                SMeterCell = SPrefix + col.SMeterCol;  C_SMeter = Home.SMeterCell;

                looking2 = false;
            }
            else if (Home.SiteNameCell == "") {
                looking2 = false;
            }

            j = j + 1;
        }
    }

    # Subsequent Rows
    else { 

        TempStart = Contracts.StartCell
        fromMsg = " (from " + date.TempStart + ")";
        
        temp_drates = CX.Bill1Cell; temp_drates = ("%.2fp" % num.temp_drates) + fromMsg;
        C_drates = C_drates + "\n" + temp_drates;

        # Not sure if there's a better way to do this
        if (C_nrates != "") { 
            temp_nrates = CX.Bill2Cell;
            temp_nrates = ("%.2fp" % num.temp_nrates) + fromMsg;
            C_nrates = C_nrates + "\n" + temp_nrates; 
        }
        if (C_erates != "") { 
            temp_erates = CX.Bill3Cell;
            temp_erates = ("%.2fp" % num.temp_erates) + fromMsg;
            C_erates = C_erates + "\n" + temp_erates; 
        }
        if (C_wrates != "") { 
            temp_wrates = CX.Bill4Cell;
            temp_wrates = ("%.2fp" % num.temp_wrates) + fromMsg;
            C_wrates = C_wrates + "\n" + temp_wrates; 
        }
        if (C_xrates != "") { 
            temp_xrates = CX.Bill5Cell;
            temp_xrates = ("%.2fp" % num.temp_xrates) + fromMsg;
            C_xrates = C_xrates + "\n" + temp_xrates; 
        }
        if (C_yrates != "") { 
            temp_yrates = CX.Bill6Cell;
            temp_yrates = ("%.2fp" % num.temp_yrates) + fromMsg;
            C_yrates = C_yrates + "\n" + temp_yrates; 
        }


        # temp_nrates = CX.Bill2Cell; temp_nrates = ("%.2fp" % num.temp_nrates) + fromMsg;
        # temp_erates = CX.Bill3Cell; temp_erates = ("%.2fp" % num.temp_erates) + fromMsg;
        # temp_wrates = CX.Bill4Cell; temp_wrates = ("%.2fp" % num.temp_wrates) + fromMsg;
        # temp_xrates = CX.Bill5Cell; temp_xrates = ("%.2fp" % num.temp_xrates) + fromMsg;
        # temp_yrates = CX.Bill6Cell; temp_yrates = ("%.2fp" % num.temp_yrates) + fromMsg;
        
        # C_nrates = C_nrates + "\n" + temp_nrates;
        # C_erates = C_erates + "\n" + temp_erates;
        # C_wrates = C_wrates + "\n" + temp_wrates;
        # C_xrates = C_xrates + "\n" + temp_xrates;
        # C_yrates = C_yrates + "\n" + temp_yrates;
        
        # Accumulate all summable fields like quantum
        temp_ACOverpayPre = CX.OverPreCell;   C_ACOverpayPre = C_ACOverpayPre + num.temp_ACOverpayPre;
        temp_ACOverpayPost = CX.OverPostCell; C_ACOverpayPost = C_ACOverpayPost + num.temp_ACOverpayPost;
        temp_ACSChargePre = CX.SCPreCell;     C_ACSChargePre = C_ACSChargePre + num.temp_ACSChargePre;
        temp_ACSChargePost = CX.SCPostCell;   C_ACSChargePost = C_ACSChargePost + num.temp_ACSChargePost;
        temp_ACStatPre = CX.StatPreCell;      C_ACStatPre = C_ACStatPre + num.temp_ACStatPre;
        temp_ACStatPost = CX.StatPostCell;    C_ACStatPost = C_ACStatPost + num.temp_ACStatPost;
        temp_RCQuantum = CX.Usage2Cell;       C_RCQuantum = C_RCQuantum + num.temp_RCQuantum;
        temp_RCStat = CX.Stat2Cell;           C_RCStat = C_RCStat + num.temp_RCStat;
        temp_RCQuantumStat = CX.Claim2Cell;   C_RCQuantum = C_RCQuantum + num.temp_RCQuantumStat;
    }


    i = i + 1;
}

"";>><< 

    # Post While Loop
    C_RCSCharge = (C_ACSChargePre + C_ACSChargePost) * num.ComRate;
    C_RCCommission = C_RCQuantum - C_RCSCharge;
    C_ACQuantumPre = C_ACOverpayPre + C_ACSChargePre;
    C_ACQuantumPost = C_ACOverpayPost + C_ACSChargePost;
    C_ACQuantumStatPre = C_ACQuantumPre + C_ACStatPre;
    C_ACQuantumStatPost = C_ACQuantumPost + C_ACStatPost;


    # Rate Cell Headers
    Bill1Cell = CX.J4;
    Bill2Cell = CX.L4;
    Bill3Cell = CX.N4;
    Bill4Cell = CX.P4;
    Bill5Cell = CX.R4;
    Bill6Cell = CX.T4;

    C_allrates = "";
    if (C_drates != "") { C_allrates = C_allrates + str.Bill1Cell + ": " + C_drates + "\n"; }
    if (C_nrates != "") { C_allrates = C_allrates + str.Bill2Cell + ": " + C_nrates + "\n"; }
    if (C_erates != "") { C_allrates = C_allrates + str.Bill3Cell + ": " + C_erates + "\n"; }
    if (C_wrates != "") { C_allrates = C_allrates + str.Bill4Cell + ": " + C_wrates + "\n"; }
    if (C_xrates != "") { C_allrates = C_allrates + str.Bill5Cell + ": " + C_xrates + "\n"; }
    if (C_yrates != "") { C_allrates = C_allrates + str.Bill6Cell + ": " + C_yrates + "\n"; }

    C_alleacs = "";
    if (C_deac != "") { C_alleacs = C_alleacs + str.Bill1Cell + ": " + C_deac + "\n"; }
    if (C_neac != "") { C_alleacs = C_alleacs + str.Bill2Cell + ": " + C_neac + "\n"; }
    if (C_eeac != "") { C_alleacs = C_alleacs + str.Bill3Cell + ": " + C_eeac + "\n"; }
    if (C_weac != "") { C_alleacs = C_alleacs + str.Bill4Cell + ": " + C_weac + "\n"; }
    if (C_xeac != "") { C_alleacs = C_alleacs + str.Bill5Cell + ": " + C_xeac + "\n"; }
    if (C_yeac != "") { C_alleacs = C_alleacs + str.Bill6Cell + ": " + C_yeac + "\n"; }

"";>><< 

    # Update Totals (Possibly unnecessary)
    T_ACOverpayPre = T_ACOverpayPre + C_ACOverpayPre;
    T_ACOverpayPost = T_ACOverpayPost + C_ACOverpayPost;
    T_ACSChargePre = T_ACSChargePre + C_ACSChargePre;
    T_ACSChargePost = T_ACSChargePost + C_ACSChargePost;
    T_ACQuantumPre = T_ACQuantumPre + C_ACQuantumPre;
    T_ACQuantumPost = T_ACQuantumPost + C_ACQuantumPost;
    T_ACStatPre = T_ACStatPre + C_ACStatPre;
    T_ACStatPost = T_ACStatPost + C_ACStatPost;
    T_ACQuantumStatPre = T_ACQuantumStatPre + C_ACQuantumStatPre;
    T_ACQuantumStatPost = T_ACQuantumStatPost + C_ACQuantumStatPost;
    T_RCCommission = T_RCCommission + C_RCCommission;
    T_RCSCharge = T_RCSCharge + C_RCSCharge;
    T_RCQuantum = T_RCQuantum + C_RCQuantum;
    T_RCStat = T_RCStat + C_RCStat;
    T_RCQuantumStat = T_RCQuantumStat + C_RCQuantumStat;

"";>>
